import React from 'react';
import { AlertTriangle, CheckCircle, XCircle, ArrowRight, Utensils, Activity, Download, TrendingUp, Microscope, Stethoscope, Dna, Mail, AlertOctagon, FileText, Brain, ChevronRight } from 'lucide-react';
import type { AnalysisResult as AnalysisResultType } from '../types';
import html2canvas from 'html2canvas';
import { jsPDF } from 'jspdf';

interface AnalysisResultProps {
  result: AnalysisResultType;
}

export function AnalysisResult({ result }: AnalysisResultProps) {
  const riskLevel = result.ckdProbability < 0.3 ? 'low' : result.ckdProbability < 0.7 ? 'medium' : 'high';
  const resultRef = React.useRef<HTMLDivElement>(null);
  const [showAnimation, setShowAnimation] = React.useState(false);
  const [email, setEmail] = React.useState('');
  const [emailStatus, setEmailStatus] = React.useState<'idle' | 'sending' | 'success' | 'error'>('idle');
  const [lastEmailSent, setLastEmailSent] = React.useState('');
  
  React.useEffect(() => {
    setShowAnimation(true);
    window.scrollTo(0, 0);
  }, []);

  const getRiskColor = (level: string) => {
    switch (level) {
      case 'low':
        return {
          bg: 'bg-green-100',
          text: 'text-green-800',
          hover: 'hover:bg-green-200',
          progress: 'bg-green-500',
          border: 'border-green-200',
          icon: CheckCircle
        };
      case 'medium':
        return {
          bg: 'bg-yellow-100',
          text: 'text-yellow-800',
          hover: 'hover:bg-yellow-200',
          progress: 'bg-yellow-500',
          border: 'border-yellow-200',
          icon: AlertTriangle
        };
      case 'high':
        return {
          bg: 'bg-red-100',
          text: 'text-red-800',
          hover: 'hover:bg-red-200',
          progress: 'bg-red-500',
          border: 'border-red-200',
          icon: AlertOctagon
        };
    }
  };

  const riskColors = getRiskColor(riskLevel);

  const generatePDF = async () => {
    if (!resultRef.current) return null;

    try {
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });

      // Add header with logo and title
      pdf.setFontSize(24);
      pdf.setTextColor(0, 0, 150);
      pdf.text('KidneyAI Analysis Report', 20, 20);

      // Add date and report ID
      pdf.setFontSize(12);
      pdf.setTextColor(100, 100, 100);
      pdf.text(`Report Date: ${new Date().toLocaleDateString()}`, 20, 30);
      pdf.text(`Report ID: ${Math.random().toString(36).substr(2, 9).toUpperCase()}`, 20, 35);

      // Add risk level section
      pdf.setFontSize(16);
      pdf.setTextColor(0, 0, 0);
      pdf.text('Risk Assessment', 20, 45);
      
      // Add colored box for risk level
      const riskColor = riskLevel === 'high' ? '#ffcccc' : riskLevel === 'medium' ? '#fff2cc' : '#d9ead3';
      pdf.setFillColor(riskColor);
      pdf.rect(20, 50, 170, 15, 'F');
      pdf.setTextColor(0, 0, 0);
      pdf.text(`Risk Level: ${riskLevel.toUpperCase()}`, 25, 60);

      // Add metrics
      pdf.text('Analysis Metrics', 20, 75);
      pdf.setFontSize(12);
      pdf.text(`CKD Probability: ${(result.ckdProbability * 100).toFixed(1)}%`, 25, 85);
      pdf.text(`Confidence Score: ${(result.confidence * 100).toFixed(1)}%`, 25, 92);

      // Add tissue analysis section
      pdf.setFontSize(16);
      pdf.text('Tissue Analysis Results', 20, 105);
      pdf.setFontSize(12);
      pdf.text(`• Swelling: ${result.hasSwelling ? 'Detected' : 'Not Detected'}`, 25, 115);
      pdf.text(`• Shrinkage: ${result.hasShrinkage ? 'Detected' : 'Not Detected'}`, 25, 122);
      pdf.text(`• Pores: ${result.hasPores ? 'Detected' : 'Not Detected'}`, 25, 129);

      // Add recommendations
      pdf.setFontSize(16);
      pdf.text('Medical Recommendations', 20, 145);
      pdf.setFontSize(12);
      result.recommendations.forEach((rec, index) => {
        pdf.text(`• ${rec}`, 25, 155 + (index * 7));
      });

      // Add footer
      pdf.setFontSize(10);
      pdf.setTextColor(100, 100, 100);
      pdf.text('Generated by KidneyAI Analysis System', 20, 280);
      pdf.text('CONFIDENTIAL MEDICAL REPORT', 150, 280);

      return pdf;
    } catch (error) {
      console.error('Error generating PDF:', error);
      return null;
    }
  };

  const handleDownloadPDF = async () => {
    const pdf = await generatePDF();
    if (pdf) {
      pdf.save('kidney-analysis-results.pdf');
    }
  };

  const handleSendEmail = async () => {
    if (!email) return;
    
    setEmailStatus('sending');
    setLastEmailSent(email);
    
    try {
      const pdf = await generatePDF();
      if (!pdf) throw new Error('Failed to generate PDF');

      const pdfData = pdf.output('datauristring');
      
      // Here we would typically make an API call to a backend service
      // For now, we'll simulate the API call
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // In a real implementation, you would send this to your backend:
      const emailData = {
        to: email,
        subject: 'Your KidneyAI Analysis Report',
        pdfAttachment: pdfData,
        reportDate: new Date().toISOString(),
        riskLevel,
        patientName: 'Patient Name' // This would come from your auth context
      };

      console.log('Sending email with data:', emailData);
      
      setEmailStatus('success');
      setTimeout(() => setEmailStatus('idle'), 3000);
      setEmail('');
    } catch (error) {
      console.error('Error sending email:', error);
      setEmailStatus('error');
      setTimeout(() => setEmailStatus('idle'), 3000);
    }
  };

  return (
    <div className={`space-y-6 transition-opacity duration-1000 ${showAnimation ? 'opacity-100' : 'opacity-0'}`} ref={resultRef}>
      <div className="glass-effect rounded-xl p-8 hover-scale transition-all">
        {/* Header Section */}
        <div className="border-b border-gray-200 pb-6 mb-8">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div>
              <h2 className="text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-indigo-600 mb-2">
                Analysis Results
              </h2>
              <p className="text-gray-600">
                Comprehensive kidney health assessment using advanced AI analysis
              </p>
            </div>
            
            <div className="flex flex-col sm:flex-row gap-4">
              <div className={`px-6 py-3 rounded-lg flex items-center justify-center ${riskColors.bg} ${riskColors.text} ${riskColors.hover} ${riskColors.border} border-2 shadow-sm`}>
                {React.createElement(riskColors.icon, { className: "h-5 w-5 mr-2 animate-pulse" })}
                <span className="font-semibold">{riskLevel.toUpperCase()} Risk Level</span>
              </div>
              
              <div className="flex gap-2">
                <div className="relative flex-1">
                  <input
                    type="email"
                    placeholder="Enter email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <button
                  onClick={handleSendEmail}
                  disabled={emailStatus === 'sending' || !email}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
                >
                  {emailStatus === 'sending' ? (
                    <div className="animate-spin h-5 w-5 border-2 border-white border-t-transparent rounded-full" />
                  ) : (
                    <Mail className="h-5 w-5" />
                  )}
                </button>
                <button
                  onClick={handleDownloadPDF}
                  className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors shadow-md hover:shadow-lg flex items-center"
                >
                  <Download className="h-5 w-5" />
                </button>
              </div>
            </div>
          </div>

          {emailStatus === 'success' && (
            <div className="mt-4 p-3 bg-green-100 text-green-700 rounded-lg flex items-center">
              <CheckCircle className="h-5 w-5 mr-2" />
              Report sent successfully to {lastEmailSent}
            </div>
          )}

          {emailStatus === 'error' && (
            <div className="mt-4 p-3 bg-red-100 text-red-700 rounded-lg flex items-center">
              <AlertTriangle className="h-5 w-5 mr-2" />
              Failed to send report. Please try again.
            </div>
          )}
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Left Column - Analysis Metrics */}
          <div className="lg:col-span-1 space-y-6">
            <div className="bg-white rounded-xl p-6 shadow-lg">
              <h3 className="text-xl font-semibold mb-6 flex items-center">
                <Brain className="h-6 w-6 text-blue-600 mr-2" />
                Analysis Metrics
              </h3>
              <div className="space-y-6">
                {[
                  { label: 'CKD Probability', value: result.ckdProbability, color: riskColors.progress },
                  { label: 'Confidence Score', value: result.confidence, color: 'bg-blue-500' }
                ].map((metric, index) => (
                  <div key={index} className="space-y-2">
                    <div className="flex justify-between items-center mb-1">
                      <span className="font-medium text-gray-700">{metric.label}</span>
                      <span className="font-bold text-lg">
                        {(metric.value * 100).toFixed(1)}%
                      </span>
                    </div>
                    <div className="h-3 bg-gray-100 rounded-full overflow-hidden">
                      <div
                        className={`h-full ${metric.color} transition-all duration-1000 ease-out rounded-full`}
                        style={{ width: `${metric.value * 100}%` }}
                      ></div>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            <div className="bg-white rounded-xl p-6 shadow-lg">
              <h3 className="text-xl font-semibold mb-6 flex items-center">
                <FileText className="h-6 w-6 text-purple-600 mr-2" />
                Key Findings
              </h3>
              <div className="space-y-4">
                {[
                  { label: 'Swelling', value: result.hasSwelling, icon: TrendingUp },
                  { label: 'Shrinkage', value: result.hasShrinkage, icon: Stethoscope },
                  { label: 'Pores', value: result.hasPores, icon: Dna }
                ].map((finding, index) => (
                  <div key={index} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg border border-gray-100">
                    <div className="flex items-center">
                      {React.createElement(finding.icon, { className: "h-5 w-5 text-gray-500 mr-3" })}
                      <span className="font-medium">{finding.label}</span>
                    </div>
                    <div className={`flex items-center ${finding.value ? 'text-red-500' : 'text-green-500'}`}>
                      <span className={`w-3 h-3 rounded-full mr-2 ${finding.value ? 'bg-red-500' : 'bg-green-500'} animate-pulse`}></span>
                      {finding.value ? 'Detected' : 'Not Detected'}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Right Column - Recommendations and Parameters */}
          <div className="lg:col-span-2 space-y-6">
            {result.parameters && (
              <div className="bg-white rounded-xl p-6 shadow-lg">
                <h3 className="text-xl font-semibold mb-6 flex items-center">
                  <Activity className="h-6 w-6 text-blue-600 mr-2" />
                  Blood Test Parameters
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {result.parameters.map((param, index) => (
                    <div
                      key={index}
                      className={`p-4 rounded-lg border-l-4 transition-all duration-300 hover:translate-x-2
                        ${param.status === 'high' ? 'border-l-red-500 bg-red-50' :
                          param.status === 'low' ? 'border-l-yellow-500 bg-yellow-50' :
                          'border-l-green-500 bg-green-50'}`}
                    >
                      <div className="flex justify-between items-start">
                        <div>
                          <h4 className="font-medium">{param.name}</h4>
                          <p className="text-sm text-gray-600 mt-1">{param.description}</p>
                        </div>
                        <span className={`px-3 py-1 rounded-full text-sm font-medium
                          ${param.status === 'high' ? 'bg-red-100 text-red-800' :
                            param.status === 'low' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-green-100 text-green-800'}`}
                        >
                          {param.value}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            <div className="bg-white rounded-xl p-6 shadow-lg">
              <h3 className="text-xl font-semibold mb-6 flex items-center">
                <Stethoscope className="h-6 w-6 text-green-600 mr-2" />
                Medical Recommendations
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-3">
                  <h4 className="font-semibold text-lg mb-4">Primary Actions</h4>
                  {result.recommendations.map((rec, index) => (
                    <div key={index} className="flex items-center p-3 bg-blue-50 rounded-lg transform transition-all duration-300 hover:translate-x-2">
                      <ChevronRight className="h-5 w-5 text-blue-500 mr-2 flex-shrink-0" />
                      <span className="text-gray-700">{rec}</span>
                    </div>
                  ))}
                </div>

                <div className="space-y-4">
                  {result.dietaryRecommendations && (
                    <div>
                      <h4 className="font-semibold text-lg mb-4">Dietary Guidelines</h4>
                      <ul className="space-y-2">
                        {result.dietaryRecommendations.map((rec, index) => (
                          <li key={index} className="flex items-center p-2 text-sm">
                            <span className="w-2 h-2 bg-green-500 rounded-full mr-3 flex-shrink-0"></span>
                            <span className="text-gray-700">{rec}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {result.lifestyleRecommendations && (
                    <div>
                      <h4 className="font-semibold text-lg mb-4">Lifestyle Recommendations</h4>
                      <ul className="space-y-2">
                        {result.lifestyleRecommendations.map((rec, index) => (
                          <li key={index} className="flex items-center p-2 text-sm">
                            <span className="w-2 h-2 bg-blue-500 rounded-full mr-3 flex-shrink-0"></span>
                            <span className="text-gray-700">{rec}</span>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}